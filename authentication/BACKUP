MODELS
from django.db import models

# Create your models here.
from django.db import models
import bcrypt


class NetworkDevice(models.Model):
    name = models.CharField(max_length=200, default='Home Network Device')
    password = models.CharField(max_length=256)

    def verify_password(self, raw_password):
        return bcrypt.checkpw(raw_password.encode('utf8'), self.password)


class NetworkType(models.Model):
    network_type = models.CharField(max_length=250)

    def testing(self):
        test = 'test'



SERIALIZERS
from django.contrib.auth.models import User
from rest_framework import serializers
import bcrypt


#Defines the fields that get serialized/deserialized
from authentication.models import NetworkType


class UserSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = User
        fields = ('url', 'username', 'email') # May change this to ModelSerializer?

    #Define how instances are created when calling serializer.save()
    def create_user(request):
        if request.method == 'POST':
            password = request.POST['password']
            email = request.POST['email']
            username = request.post['username']
            thehash = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt(10)),

            User.objects.create(
                email=email,
                username=username,
                password=thehash,
            )

    # Define how instances are updated when calling serializer.save()
    def update(self, instance, validated_data):
        """
        Update and return an existing `User` instance, given the validated data.
        """
        instance.password = validated_data.get('password', instance.kkk)
        instance.email = validated_data('email', instance.email)
        instance.username = validated_data('username', instance.username)
        instance.save
        return instance


class NetworkDevice(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = User
        fields = ('url', 'name', 'password')


class NetworkTypeSerializer(serializers.ModelSerializer):
    class Meta:
        model = NetworkType
        fields = ('id', 'network_type')

        def testing(self):
            test = 'test'




##URLS
from django.conf.urls import url
from rest_framework.urlpatterns import format_suffix_patterns

from authentication import views

urlpatterns = [
    url(r'^register/$', views.register_network),
    url(r'^retrieve-network-type/(?P<pk>[0-9]+)/$', views.get_network_type),
    url(r'^update-network-type/(?P<pk>[0-9]+)/$', views.update_network_type),
    url(r'^delete-network-type/(?P<pk>[0-9]+)/$', views.delete_network_type),

    #Function, Class, and Mixins
    url(r'^view-network-types/$', views.network_type_list), #network_type_detail
    url(r'^view-network-types_class/$', views.NetworkTypeList.as_view()), #network_type_detail
    url(r'^view-network-types_class_mixins/$', views.NetworkTypeListMixing.as_view()),  # network_type_detail


    url(r'^view-network-type-details/(?P<pk>[0-9]+)/$', views.network_type_detail),
    #url(r'^authentication/(?P<pk>[0-9]+)/$', views.snippet_detail),
]

urlpatterns = format_suffix_patterns(urlpatterns) #Allows for url file appendings e.g. append .json or .api (or use Accept.json)


##VIEWS
from django.http import JsonResponse, HttpResponse
from django.shortcuts import render
from django.contrib.auth.models import User
from django.views.decorators.csrf import csrf_exempt
from rest_framework import viewsets, mixins, generics
from rest_framework.parsers import JSONParser
from rest_framework.response import Response #Wrapper, the correct data is handled rather than having to manually do it ourself
from rest_framework.views import APIView

from authentication.models import NetworkType
from authentication.serializers import UserSerializer, NetworkTypeSerializer
from rest_framework.decorators import api_view
from rest_framework import status


# Create your views here.
@csrf_exempt # because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as csrf_exempt
def register_network(request):
   # users = User.objects.all() #need to loop through emails and usernames to make sure they're unique
    if request.method == 'POST':
        net_type = request.POST['network_type']
        network = NetworkType(network_type=net_type)
        network.save()
        return Response(status=status.HTTP_200_OK)
    return Response(status=status.HTTP_400_BAD_REQUEST)

@csrf_exempt # because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as csrf_exempt
@api_view(['GET', 'POST', ])
def get_network_type(request, pk):
    try:
        network_type = NetworkType.objects.get(pk=pk)
    except NetworkType.DoesNotExist:
        return Response(status=status.HTTP_400_BAD_REQUEST) # Working = HttpResponse(status=404)
#REMEMBER TO PASS IN THE CONTENT TYPE YOU WANT RETURNED WHEN USING Response() Wrapper
    if request.method == 'POST':
        the_network_type = NetworkTypeSerializer(network_type)
        return Response(the_network_type.data, status=status.HTTP_200_OK) #working = return JsonResponse(the_network_type.data)


@csrf_exempt # because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as csrf_exempt
@api_view(['GET', 'POST', ])
def update_network_type(request, pk):
    try:
        the_network_type = NetworkType.objects.get(pk=pk)
    except NetworkType.DoesNotExist:
        return Response(status=status.HTTP_400_BAD_REQUEST)  # Working = HttpResponse(status=404)

    if request.method == 'POST':
        net_type = request.POST['network_type']
        the_network_type.network_type = net_type
        the_network_type.save()
        return Response(status=status.HTTP_200_OK)


@csrf_exempt # because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as csrf_exempt
@api_view(['GET', 'POST', ])
def delete_network_type(request, pk):
    try:
        the_network_type = NetworkType.objects.get(pk=pk)
    except NetworkType.DoesNotExist:
        return Response(status=status.HTTP_400_BAD_REQUEST)  # Working = HttpResponse(status=404)

    if request.method == 'POST':
        net_type = request.POST['network_type']
        the_network_type.network_type = net_type
        the_network_type.delete()
        return Response(status=status.HTTP_200_OK)


@api_view(['GET', 'POST']) #This is good to have a browsable view of the API
def network_type_list(request, format=None):
    """
    List all network devices.
    """
    network_types = NetworkType.objects.all()
    network_types_serialized = NetworkTypeSerializer(network_types, many=True)
    return Response(network_types_serialized.data)


@api_view(['GET', 'POST']) #This is good to have a browsable view of the API
def network_type_detail(request, pk, format=None):
    """
    List all network devices.
    """
    try:
        the_network_type = NetworkType.objects.get(pk=pk)
    except NetworkType.DoesNotExist:
        return Response(status=status.HTTP_400_BAD_REQUEST)  # Working = HttpResponse(status=404)

    network_type_detail_serialized = NetworkTypeSerializer(the_network_type)
    return Response(network_type_detail_serialized.data)


class NetworkTypeList(APIView):#Class Based View. The function based view is def network_type_list
    def post(self, request, format=None):
        network_types = NetworkType.objects.all()
        network_types_serialized = NetworkTypeSerializer(network_types, many=True)
        return Response(network_types_serialized.data)


#Class base allow the use of reusable behaviour by using Mixins. Common behaviour can be seperated as shown below.
class NetworkTypeListMixing(generics.ListCreateAPIView):
    queryset = NetworkType.objects.all()
    serializer_class = NetworkTypeSerializer

